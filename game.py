class Game:

    def __init__(self, id):
        self.p3Went = False
        self.p4Went = False
        self.p1Went = False
        self.p2Went = False
        self.ready = False
        self.id = id
        self.moves = [None, None, None, None]
        self.wins = [0, 0, 0, 0]
        self.ties = 0

    def get_player_move(self, p):
        """
        :param p: [0,1,2,3]
        :return: Move
        """
        return self.moves[p]

    def play(self, player, move):
        self.moves[player] = move
        if player == 0:
            self.p1Went = True
        if player == 1:
            self.p2Went = True
        if player == 2:
            self.p3Went = True
        if player == 3:
            self.p4Went = True


    def connected(self):
        return self.ready

    def bothWent(self):
        return self.p1Went and self.p2Went

    def winner(self):
        a1 = [0, 0, 0, 0]
        b1 = [0, 0, 0, 0]
        c1 = [0, 0, 0, 0]
        e1 = [0, 0, 0, 0]
        pole = [
            [(279, 650), (279, 600), (279, 555), (279, 505), (279, 460), (279, 415), (279, 367), (234, 367), (185, 367),
             (139, 367), (93, 367), (45, 367), (0, 367), (0, 320), (0, 274), (45, 274), (93, 274), (139, 274),
             (185, 274),
             (234, 274), (279, 274), (279, 228), (279, 180), (279, 134), (279, 88), (279, 40), (279, -5), (326, -5),
             (372, -5), (372, 40), (372, 88), (372, 134), (372, 180), (372, 228), (372, 274), (419, 274), (465, 274),
             (512, 274), (559, 274), (606, 274), (653, 274), (653, 320), (653, 367), (606, 367), (559, 367), (512, 367),
             (465, 367), (419, 367), (372, 367), (372, 415), (372, 460), (372, 505), (372, 555), (372, 600), (372, 650),
             (325, 650), (325, 600), (325, 555), (325, 505), (325, 460), (325, 415)],
            [(0, 274), (45, 274), (93, 274), (139, 274), (185, 274),
             (234, 274), (279, 274), (279, 228), (279, 180), (279, 134), (279, 88), (279, 40), (279, -5), (326, -5),
             (372, -5), (372, 40), (372, 88), (372, 134), (372, 180), (372, 228), (372, 274), (419, 274), (465, 274),
             (512, 274), (559, 274), (606, 274), (653, 274), (653, 320), (653, 367), (606, 367), (559, 367), (512, 367),
             (465, 367), (419, 367), (372, 367), (372, 415), (372, 460), (372, 505), (372, 555), (372, 600), (372, 650),
             (325, 650), (279, 650), (279, 600), (279, 555),
             (279, 505), (279, 460), (279, 415), (279, 367), (234, 367), (185, 367), (139, 367), (93, 367), (45, 367),
             (0, 367), (0, 320), (45, 320), (93, 320), (139, 320), (185, 320), (234, 320)],
            [(372, -5), (372, 40), (372, 88), (372, 134), (372, 180), (372, 228), (372, 274), (419, 274), (465, 274),
             (512, 274), (559, 274), (606, 274), (653, 274), (653, 320), (653, 367), (606, 367), (559, 367), (512, 367),
             (465, 367), (419, 367), (372, 367), (372, 415), (372, 460), (372, 505), (372, 555), (372, 600), (372, 650),
             (325, 650), (279, 650), (279, 600), (279, 555),
             (279, 505), (279, 460), (279, 415), (279, 367), (234, 367), (185, 367), (139, 367), (93, 367), (45, 367),
             (0, 367), (0, 320), (45, 320), (0, 274), (45, 274), (93, 274),
             (139, 274), (185, 274), (234, 274), (279, 274), (279, 228), (279, 180), (279, 134), (279, 88), (279, 40),
             (279, -5), (326, -5), (326, 40), (326, 88), (326, 134), (326, 180), (326, 228), (326, 274)],
            [(653, 367), (606, 367), (559, 367), (512, 367), (465, 367), (419, 367), (372, 367), (372, 415), (372, 460),
             (372, 505), (372, 555), (372, 600), (372, 650), (325, 650), (279, 650), (279, 600), (279, 555), (279, 505),
             (279, 460), (279, 415), (279, 367), (234, 367), (185, 367), (139, 367), (93, 367), (45, 367), (0, 367),
             (0, 320), (0, 274), (45, 274), (93, 274), (139, 274), (185, 274), (234, 274), (279, 274),
             (279, 228), (279, 180), (279, 134), (279, 88), (279, 40), (279, -5), (326, -5), (372, -5), (372, 40),
             (372, 88), (372, 134), (372, 180), (372, 228), (372, 274), (419, 274), (465, 274), (512, 274), (559, 274),
             (606, 274), (653, 274), (653, 320), (606, 320), (559, 320), (512, 320), (465, 320), (419, 320), (372, 320)]]
        xy1 = [(70, 475), (70, 55), (488, 55), (488, 475)]
        xy2 = [(163, 475), (70, 148), (583, 148), (583, 475)]
        xy3 = [(70, 570), (163, 55), (583, 55), (583, 570)]
        xy4 = [(163, 570), (163, 148), (488, 148), (488, 570)]

        p1 = self.moves[0].upper()[0]
        p2 = self.moves[1].upper()[0]
        p3 = self.moves[2].upper()[0]
        p4 = self.moves[3].upper()[0]


        winner = -1
        if xy1[0] == pole[0][a1[57, 58, 59, 60]] and xy2[0] == pole[0][b1[57, 58, 59, 60]] and xy3[0] == pole[0][c1[57, 58, 59, 60]] and xy4[0] == pole[0][e1[57, 58, 59, 60]]:
            winner = 0
        if xy1[1] == pole[1][a1[57, 58, 59, 60]] and xy2[1] == pole[1][b1[57, 58, 59, 60]] and xy3[1] == pole[1][c1[57, 58, 59, 60]] and xy4[1] == pole[1][e1[57, 58, 59, 60]]:
            winner = 1
        if xy1[2] == pole[2][a1[57, 58, 59, 60]] and xy2[2] == pole[2][b1[57, 58, 59, 60]] and xy3[2] == pole[2][c1[57, 58, 59, 60]] and xy4[2] == pole[2][e1[57, 58, 59, 60]]:
            winner = 2
        if xy1[3] == pole[3][a1[57, 58, 59, 60]] and xy2[3] == pole[3][b1[57, 58, 59, 60]] and xy3[3] == pole[3][c1[57, 58, 59, 60]] and xy4[3] == pole[3][e1[57, 58, 59, 60]]:
            winner = 3

        return winner

    def resetWent(self):
        self.p1Went = False
        self.p2Went = False
        self.p3Went = False
        self.p4Went = False